continue
@benefited = Benefited.new()
@benefited = Benefited.new(params)
params[:benefited]
params.keys
params
continue
next
continue
AnalysisResult.find(@analyse.analysis_result_ids).destroy_all
results.destroy
results.destroy_all
results.detroy_all
results
a
results.destroy_all
results
results = AnalysisResult.find(@analyse.analysis_result_ids)
results = AnalysisResult.find(@analyse.analysis_results_ids)
@analyse = Analyse.find(params[:id])
exit
next
exit
binary_data
signature
next
continue
binary_data
signature
next
continue
binary_data
binaru_data
signature
next
continue
binary_data.unpack('C2').join('')
binary_data.unpack('C2').join(')
binary_data.unpack('C2')
binary_data.unpack(C2)
binary_data.signature
binary_data[4]
binary_data[3]
binary_data[2]
binary_data[1]
binary_data[0]
binary_data
next
continue
binary_data[0]
binary_data[3]
binary_data[2]
binary_data[1]
binary_data.second
binary_data.first
binary_data
MIME::Types.of(binary_data)
mime_type
next
continue
next
mime_type
next
signature
next
continue
reload!
Mime::Types.of(binary_data).first
MIME::Types.of(binary_data).first
require 'mime/types'
signature = binary_data.unpack('C1').join('')
signature
signature = binary_data.unpack('C2').join('')
binary_data
binaru_data
continue
next
binary
next
params[:images][0]
binary
continue
next
@analyse?
if @analyse
@analyse
next
@analyse
continue
params[:images]
params[images]
params
continue
params[:images]
params[:images][:_files]
params[:images][:_files][0]
typeof params[:images][:_files][0]
params[:images][:_files][0].length
params[:images][:_files][0].size
params[:images][:_files][0]
params[:images][:_fileNames]
params[:images][:_files]
params[:images]._files
params[:images]
params.images
params
continue
@analyzes
next
